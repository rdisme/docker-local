version: '3.3'
services:

  # jenkins:
  #   container_name: jenkins
  #   image: jenkinsci/blueocean
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     - ${JENKINS}:/var/jenkins_home
  #     #这项很重要，它可以使你在Jenkins所在的容器中，像宿主机一样操作其他容器
  #     - ${DOCKERSOCK}:/var/run/docker.sock
  #   ports:
  #     - '8080:8080'
  #     - '50000'
  #   # 权限问题 指定root
  #   user: root

  # php80:
  #   container_name: php80
  #   image: php:8.0-fpm
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     # 挂载PHP项目到容器中PHP默认访问目录
  #     - ${WWW}:/var/www/html
  #   ports:
  #     # 开启容器内部9000端口，外部端口自动分配
  #     - '9000'
  #   cap_add:
  #     - SYS_PTRACE

  # php72:
  #   container_name: php72
  #   image: registry.cn-beijing.aliyuncs.com/rdisme/php:7.2-1-1.2
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     # 挂载PHP核心配置文件
  #     - ${PHP72}conf/php.ini:/usr/local/etc/php/php.ini
  #     # 挂载php-fpm进程服务的配置文件
  #     - ${PHP72}conf/php-fpm.conf:/usr/local/etc/php-fpm.conf
  #     # 挂载php-fpm进程服务的扩展配置文件
  #     - ${PHP72}conf/www.conf:/usr/local/etc/php-fpm.d/www.conf
  #     # 挂载seaslog
  #     - ${PHP72}log/seaslog:/var/log/seaslog
  #     # 挂载慢日志
  #     - ${PHP72}log/slow:/var/log/slow
  #     # 挂载PHP项目到容器中PHP默认访问目录
  #     - ${WWW}:/var/www/html
  #   ports:
  #     # 开启容器内部9000端口，外部端口自动分配
  #     - '9000'
  #   cap_add:
  #     - SYS_PTRACE

  # nginx:
  #   container_name: nginx
  #   image: nginx:1.19
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #       # 挂载本地nginx配置文件
  #       - ${NGINX}nginx.conf:/etc/nginx/nginx.conf
  #       # 挂载本地nginx 域名配置目录
  #       - ${NGINX}conf.d:/etc/nginx/conf.d
  #       # 挂载本地SSL证书目录
  #       - ${NGINX}cert:/etc/nginx/cert
  #       # 挂载本地日志目录
  #       - ${NGINX}log:/var/log/nginx
  #       # 挂载本地项目目录
  #       - ${WWW}:/usr/share/nginx/html
  #   ports:
  #     - '80-90:80-90'

  # mysql8.0.13:
  #   container_name: mysql8.0.13
  #   image: mysql:8.0.13
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   ports:
  #     - "3306"
  #   volumes:
  #     - ${MYSQL8013}mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
  #     - ${MYSQL8013}data:/var/lib/mysql/:rw
  #   command: --default-authentication-plugin=mysql_native_password
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 888888
  #     TZ: "$TZ"

  # mysql8.0.23:
  #   container_name: mysql8.0.23
  #   image: mysql:8.0.23
  #   ports:
  #     - "3306"
  #   volumes:
  #     - ${MYSQL8023}mysql.cnf:/etc/mysql/conf.d/mysql.cnf:ro
  #     - ${MYSQL8023}data:/var/lib/mysql/:rw
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   command: --default-authentication-plugin=mysql_native_password
  #   restart: always
  #   networks:
  #     - default
  #   environment:
  #     MYSQL_ROOT_PASSWORD: 888888
  #     TZ: "$TZ"

  # mysql admin
  # adminer:
  #   container_name: adminer
  #   image: adminer
  #   restart: always
  #   ports:
  #     - 8081:8080
  #   networks:
  #     - default

######################################################################### ↓ redis ↓ ##########################################
  redis5.0:
    container_name: redis5.0
    image: redis:5.0
    ports:
      - "6379"
    volumes:
      - ${REDIS50}redis.conf:/usr/local/etc/redis.conf
      - ${REDIS50}data:/usr/local/redis/data
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "20"

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander
    environment:
      - TZ=$TZ
      - REDIS_HOSTS=dev:redis:6379,local:redis:6379
      - HTTP_USER=root
      - HTTP_PASSWORD=888888
    ports:
      - 8081:8081
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "20"

  redis-manager:
    container_name: redis-manager
    image: reasonduan/redis-manager
    ports:
       - "8182:8182"
    environment:
      - TZ=$TZ
      - DATASOURCE_DATABASE=redis_manager
      - DATASOURCE_URL=jdbc:mysql://mysql8.0.26:3306/redis_manager?useUnicode=true&characterEncoding=utf-8&serverTimezone=GMT%2b8
      - DATASOURCE_USERNAME=redis_manager
      - DATASOURCE_PASSWORD=888888
    logging:
      driver: "json-file"
      options:
        max-size: "2m"
        max-file: "20"
    restart: always
######################################################################### ↑ redis ↑ ##########################################

  # rabbitmq:
  #   container_name: rabbitmq
  #   image: rabbitmq:3.8
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   hostname: myrabbitmq
  #   environment:
  #     RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
  #     RABBITMQ_DEFAULT_USER: rabbitmq
  #     RABBITMQ_DEFAULT_PASS: rabbitmq
  #     RABBITMQ_DEFAULT_VHOST: /
  #   ports:
  #     # web后台 端口
  #     - "8084:15672"
  #     - "5672"
  #   restart: always

  # activemq:
  #   image: rmohr/activemq
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   ports:
  #     # activemq服务监控端口
  #     - "5672:61613"
  #     # web管理页面端口
  #     - "8085:8161"
  #   networks:
  #     - default
  #   restart: always
  #   container_name: activemq

  # php-supervisor:
  #   container_name: php-supervisor
  #   image: registry.cn-beijing.aliyuncs.com/rdisme/php:7.2-1-1.2
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   cap_add:
  #     - SYS_PTRACE
  #   volumes:
  #     # 挂载supervisor配置文件
  #     - ${SUPERVISOR}:/etc/supervisor
  #     # 挂载PHP核心配置文件
  #     - ${PHP72}conf/php.ini:/usr/local/etc/php/php.ini
  #     # 挂载php-fpm进程服务的配置文件
  #     - ${PHP72}conf/php-fpm.conf:/usr/local/etc/php-fpm.conf
  #     # 挂载php-fpm进程服务的扩展配置文件
  #     - ${PHP72}conf/www.conf:/usr/local/etc/php-fpm.d/www.conf
  #     # 挂载seaslog
  #     - ${PHP72}log/seaslog:/var/log/seaslog
  #     # 挂载慢日志
  #     - ${PHP72}log/slow:/var/log/slow
  #     # 挂载PHP项目到容器中PHP默认访问目录
  #     - ${WWW}:/var/www/html
  #   ports:
  #     # supervisor web管理后台端口映射
  #     - 8086:9001
  #   networks:
  #     - default
  #   restart: always
  #   command: supervisord -nc /etc/supervisor/supervisord.conf

  # showdoc:
  #   container_name: showdoc
  #   image: star7th/showdoc:latest
  #   restart: always
  #   ports:
  #     - "8087:80"
  #   volumes:
  #     - ${SHOWDOC}html:/var/www/html/
  #   environment:
  #     TZ: "$TZ"
  #   # 权限问题 指定root
  #   user: root
  #   privileged: true

  # openjdk:
  #   container_name: openjdk
  #   image: openjdk:8
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   stdin_open: true # docker run -i
  #   tty: true # docker run -t
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     - ${WWW}:/www
  #   ports:
  #     - 8888:8080

  # tomcat:
  #   container_name: tomcat
  #   image: tomcat:9
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     - ${WWW}:/www
  #   ports:
  #     - 8080:8080

  # node:
  #   container_name: node
  #   image: node:18.5
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "2m"
  #       max-file: "20"
  #   restart: always
  #   stdin_open: true # docker run -i
  #   tty: true # docker run -t
  #   environment:
  #     TZ: "$TZ"
  #   volumes:
  #     - ${WWW}:/www
    # ports:
      # 比如 npm run dev 此时的端口，需要映射到容器外部才能访问
      # - '8080'
